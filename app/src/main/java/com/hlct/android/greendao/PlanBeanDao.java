package com.hlct.android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hlct.android.bean.PlanBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_BEAN".
*/
public class PlanBeanDao extends AbstractDao<PlanBean, Long> {

    public static final String TABLENAME = "PLAN_BEAN";

    /**
     * Properties of entity PlanBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PlanId = new Property(0, Long.class, "planId", true, "_id");
        public final static Property PlanNumber = new Property(1, String.class, "planNumber", false, "PLAN_NUMBER");
        public final static Property PersonID = new Property(2, Long.class, "personID", false, "PERSON_ID");
        public final static Property InventoryPerson = new Property(3, String.class, "inventoryPerson", false, "INVENTORY_PERSON");
        public final static Property PlanTime = new Property(4, String.class, "planTime", false, "PLAN_TIME");
        public final static Property ConfirmPerson = new Property(5, String.class, "confirmPerson", false, "CONFIRM_PERSON");
        public final static Property ConfirmTime = new Property(6, String.class, "confirmTime", false, "CONFIRM_TIME");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
    }


    public PlanBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: planId
                "\"PLAN_NUMBER\" TEXT," + // 1: planNumber
                "\"PERSON_ID\" INTEGER," + // 2: personID
                "\"INVENTORY_PERSON\" TEXT," + // 3: inventoryPerson
                "\"PLAN_TIME\" TEXT," + // 4: planTime
                "\"CONFIRM_PERSON\" TEXT," + // 5: confirmPerson
                "\"CONFIRM_TIME\" TEXT," + // 6: confirmTime
                "\"REMARK\" TEXT);"); // 7: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanBean entity) {
        stmt.clearBindings();
 
        Long planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindLong(1, planId);
        }
 
        String planNumber = entity.getPlanNumber();
        if (planNumber != null) {
            stmt.bindString(2, planNumber);
        }
 
        Long personID = entity.getPersonID();
        if (personID != null) {
            stmt.bindLong(3, personID);
        }
 
        String inventoryPerson = entity.getInventoryPerson();
        if (inventoryPerson != null) {
            stmt.bindString(4, inventoryPerson);
        }
 
        String planTime = entity.getPlanTime();
        if (planTime != null) {
            stmt.bindString(5, planTime);
        }
 
        String confirmPerson = entity.getConfirmPerson();
        if (confirmPerson != null) {
            stmt.bindString(6, confirmPerson);
        }
 
        String confirmTime = entity.getConfirmTime();
        if (confirmTime != null) {
            stmt.bindString(7, confirmTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanBean entity) {
        stmt.clearBindings();
 
        Long planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindLong(1, planId);
        }
 
        String planNumber = entity.getPlanNumber();
        if (planNumber != null) {
            stmt.bindString(2, planNumber);
        }
 
        Long personID = entity.getPersonID();
        if (personID != null) {
            stmt.bindLong(3, personID);
        }
 
        String inventoryPerson = entity.getInventoryPerson();
        if (inventoryPerson != null) {
            stmt.bindString(4, inventoryPerson);
        }
 
        String planTime = entity.getPlanTime();
        if (planTime != null) {
            stmt.bindString(5, planTime);
        }
 
        String confirmPerson = entity.getConfirmPerson();
        if (confirmPerson != null) {
            stmt.bindString(6, confirmPerson);
        }
 
        String confirmTime = entity.getConfirmTime();
        if (confirmTime != null) {
            stmt.bindString(7, confirmTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlanBean readEntity(Cursor cursor, int offset) {
        PlanBean entity = new PlanBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // planId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // planNumber
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // personID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // inventoryPerson
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // planTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // confirmPerson
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // confirmTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanBean entity, int offset) {
        entity.setPlanId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setInventoryPerson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlanTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setConfirmPerson(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setConfirmTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlanBean entity, long rowId) {
        entity.setPlanId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlanBean entity) {
        if(entity != null) {
            return entity.getPlanId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlanBean entity) {
        return entity.getPlanId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
