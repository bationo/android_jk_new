package com.hlct.android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hlct.android.bean.InfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFO_BEAN".
*/
public class InfoBeanDao extends AbstractDao<InfoBean, Long> {

    public static final String TABLENAME = "INFO_BEAN";

    /**
     * Properties of entity InfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DepartmentId = new Property(0, Long.class, "departmentId", true, "_id");
        public final static Property DepartmentNumber = new Property(1, Long.class, "departmentNumber", false, "DEPARTMENT_NUMBER");
        public final static Property DepartmentName = new Property(2, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property DepartmentConnecter = new Property(3, String.class, "departmentConnecter", false, "DEPARTMENT_CONNECTER");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property DepartmentFax = new Property(5, String.class, "departmentFax", false, "DEPARTMENT_FAX");
        public final static Property DepartmentAddress = new Property(6, String.class, "departmentAddress", false, "DEPARTMENT_ADDRESS");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property BankId = new Property(8, Long.class, "bankId", false, "BANK_ID");
    }


    public InfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public InfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: departmentId
                "\"DEPARTMENT_NUMBER\" INTEGER," + // 1: departmentNumber
                "\"DEPARTMENT_NAME\" TEXT," + // 2: departmentName
                "\"DEPARTMENT_CONNECTER\" TEXT," + // 3: departmentConnecter
                "\"PHONE\" TEXT," + // 4: phone
                "\"DEPARTMENT_FAX\" TEXT," + // 5: departmentFax
                "\"DEPARTMENT_ADDRESS\" TEXT," + // 6: departmentAddress
                "\"REMARK\" TEXT," + // 7: remark
                "\"BANK_ID\" INTEGER);"); // 8: bankId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InfoBean entity) {
        stmt.clearBindings();
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(1, departmentId);
        }
 
        Long departmentNumber = entity.getDepartmentNumber();
        if (departmentNumber != null) {
            stmt.bindLong(2, departmentNumber);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(3, departmentName);
        }
 
        String departmentConnecter = entity.getDepartmentConnecter();
        if (departmentConnecter != null) {
            stmt.bindString(4, departmentConnecter);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String departmentFax = entity.getDepartmentFax();
        if (departmentFax != null) {
            stmt.bindString(6, departmentFax);
        }
 
        String departmentAddress = entity.getDepartmentAddress();
        if (departmentAddress != null) {
            stmt.bindString(7, departmentAddress);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        Long bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindLong(9, bankId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InfoBean entity) {
        stmt.clearBindings();
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(1, departmentId);
        }
 
        Long departmentNumber = entity.getDepartmentNumber();
        if (departmentNumber != null) {
            stmt.bindLong(2, departmentNumber);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(3, departmentName);
        }
 
        String departmentConnecter = entity.getDepartmentConnecter();
        if (departmentConnecter != null) {
            stmt.bindString(4, departmentConnecter);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String departmentFax = entity.getDepartmentFax();
        if (departmentFax != null) {
            stmt.bindString(6, departmentFax);
        }
 
        String departmentAddress = entity.getDepartmentAddress();
        if (departmentAddress != null) {
            stmt.bindString(7, departmentAddress);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        Long bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindLong(9, bankId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InfoBean readEntity(Cursor cursor, int offset) {
        InfoBean entity = new InfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // departmentId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // departmentNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // departmentName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // departmentConnecter
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // departmentFax
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // departmentAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // bankId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InfoBean entity, int offset) {
        entity.setDepartmentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDepartmentNumber(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDepartmentName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDepartmentConnecter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepartmentFax(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDepartmentAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBankId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InfoBean entity, long rowId) {
        entity.setDepartmentId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InfoBean entity) {
        if(entity != null) {
            return entity.getDepartmentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InfoBean entity) {
        return entity.getDepartmentId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
