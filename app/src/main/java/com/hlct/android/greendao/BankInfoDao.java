package com.hlct.android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hlct.android.bean.BankInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_INFO".
*/
public class BankInfoDao extends AbstractDao<BankInfo, Long> {

    public static final String TABLENAME = "BANK_INFO";

    /**
     * Properties of entity BankInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BankId = new Property(1, String.class, "bankId", false, "BANK_ID");
        public final static Property BankName = new Property(2, String.class, "bankName", false, "BANK_NAME");
        public final static Property BankLevel = new Property(3, String.class, "bankLevel", false, "BANK_LEVEL");
        public final static Property BankAddress = new Property(4, String.class, "bankAddress", false, "BANK_ADDRESS");
    }


    public BankInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BankInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BANK_ID\" TEXT," + // 1: bankId
                "\"BANK_NAME\" TEXT," + // 2: bankName
                "\"BANK_LEVEL\" TEXT," + // 3: bankLevel
                "\"BANK_ADDRESS\" TEXT);"); // 4: bankAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindString(2, bankId);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(3, bankName);
        }
 
        String bankLevel = entity.getBankLevel();
        if (bankLevel != null) {
            stmt.bindString(4, bankLevel);
        }
 
        String bankAddress = entity.getBankAddress();
        if (bankAddress != null) {
            stmt.bindString(5, bankAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindString(2, bankId);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(3, bankName);
        }
 
        String bankLevel = entity.getBankLevel();
        if (bankLevel != null) {
            stmt.bindString(4, bankLevel);
        }
 
        String bankAddress = entity.getBankAddress();
        if (bankAddress != null) {
            stmt.bindString(5, bankAddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BankInfo readEntity(Cursor cursor, int offset) {
        BankInfo entity = new BankInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bankId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bankName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bankLevel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // bankAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBankId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBankName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBankLevel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBankAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BankInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BankInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BankInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
