package com.hlct.android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hlct.android.bean.AssetBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSET_BEAN".
*/
public class AssetBeanDao extends AbstractDao<AssetBean, Long> {

    public static final String TABLENAME = "ASSET_BEAN";

    /**
     * Properties of entity AssetBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SupplierId = new Property(1, Long.class, "supplierId", false, "SUPPLIER_ID");
        public final static Property FacilityName = new Property(2, String.class, "facilityName", false, "FACILITY_NAME");
        public final static Property FacilityNumber = new Property(3, String.class, "facilityNumber", false, "FACILITY_NUMBER");
        public final static Property FacilityType = new Property(4, String.class, "facilityType", false, "FACILITY_TYPE");
        public final static Property BankId = new Property(5, Long.class, "bankId", false, "BANK_ID");
        public final static Property BankName = new Property(6, String.class, "bankName", false, "BANK_NAME");
        public final static Property DepartmentId = new Property(7, Long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property DepartmentName = new Property(8, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property ProoertySource = new Property(9, String.class, "prooertySource", false, "PROOERTY_SOURCE");
        public final static Property Status = new Property(10, String.class, "status", false, "STATUS");
        public final static Property UseDate = new Property(11, java.util.Date.class, "useDate", false, "USE_DATE");
        public final static Property UserName = new Property(12, String.class, "userName", false, "USER_NAME");
        public final static Property Rfid = new Property(13, String.class, "rfid", false, "RFID");
        public final static Property WarehouseId = new Property(14, Long.class, "warehouseId", false, "WAREHOUSE_ID");
        public final static Property Costing = new Property(15, String.class, "costing", false, "COSTING");
        public final static Property UserId = new Property(16, Long.class, "userId", false, "USER_ID");
    }


    public AssetBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AssetBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SUPPLIER_ID\" INTEGER," + // 1: supplierId
                "\"FACILITY_NAME\" TEXT," + // 2: facilityName
                "\"FACILITY_NUMBER\" TEXT," + // 3: facilityNumber
                "\"FACILITY_TYPE\" TEXT," + // 4: facilityType
                "\"BANK_ID\" INTEGER," + // 5: bankId
                "\"BANK_NAME\" TEXT," + // 6: bankName
                "\"DEPARTMENT_ID\" INTEGER," + // 7: departmentId
                "\"DEPARTMENT_NAME\" TEXT," + // 8: departmentName
                "\"PROOERTY_SOURCE\" TEXT," + // 9: prooertySource
                "\"STATUS\" TEXT," + // 10: status
                "\"USE_DATE\" INTEGER," + // 11: useDate
                "\"USER_NAME\" TEXT," + // 12: userName
                "\"RFID\" TEXT," + // 13: rfid
                "\"WAREHOUSE_ID\" INTEGER," + // 14: warehouseId
                "\"COSTING\" TEXT," + // 15: costing
                "\"USER_ID\" INTEGER);"); // 16: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssetBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long supplierId = entity.getSupplierId();
        if (supplierId != null) {
            stmt.bindLong(2, supplierId);
        }
 
        String facilityName = entity.getFacilityName();
        if (facilityName != null) {
            stmt.bindString(3, facilityName);
        }
 
        String facilityNumber = entity.getFacilityNumber();
        if (facilityNumber != null) {
            stmt.bindString(4, facilityNumber);
        }
 
        String facilityType = entity.getFacilityType();
        if (facilityType != null) {
            stmt.bindString(5, facilityType);
        }
 
        Long bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindLong(6, bankId);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(7, bankName);
        }
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(8, departmentId);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(9, departmentName);
        }
 
        String prooertySource = entity.getProoertySource();
        if (prooertySource != null) {
            stmt.bindString(10, prooertySource);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        java.util.Date useDate = entity.getUseDate();
        if (useDate != null) {
            stmt.bindLong(12, useDate.getTime());
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(13, userName);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(14, rfid);
        }
 
        Long warehouseId = entity.getWarehouseId();
        if (warehouseId != null) {
            stmt.bindLong(15, warehouseId);
        }
 
        String costing = entity.getCosting();
        if (costing != null) {
            stmt.bindString(16, costing);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(17, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssetBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long supplierId = entity.getSupplierId();
        if (supplierId != null) {
            stmt.bindLong(2, supplierId);
        }
 
        String facilityName = entity.getFacilityName();
        if (facilityName != null) {
            stmt.bindString(3, facilityName);
        }
 
        String facilityNumber = entity.getFacilityNumber();
        if (facilityNumber != null) {
            stmt.bindString(4, facilityNumber);
        }
 
        String facilityType = entity.getFacilityType();
        if (facilityType != null) {
            stmt.bindString(5, facilityType);
        }
 
        Long bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindLong(6, bankId);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(7, bankName);
        }
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(8, departmentId);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(9, departmentName);
        }
 
        String prooertySource = entity.getProoertySource();
        if (prooertySource != null) {
            stmt.bindString(10, prooertySource);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        java.util.Date useDate = entity.getUseDate();
        if (useDate != null) {
            stmt.bindLong(12, useDate.getTime());
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(13, userName);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(14, rfid);
        }
 
        Long warehouseId = entity.getWarehouseId();
        if (warehouseId != null) {
            stmt.bindLong(15, warehouseId);
        }
 
        String costing = entity.getCosting();
        if (costing != null) {
            stmt.bindString(16, costing);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(17, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssetBean readEntity(Cursor cursor, int offset) {
        AssetBean entity = new AssetBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // supplierId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // facilityName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // facilityNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // facilityType
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // bankId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bankName
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // departmentId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // departmentName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // prooertySource
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // status
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // useDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // rfid
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // warehouseId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // costing
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssetBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSupplierId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFacilityName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFacilityNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFacilityType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBankId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBankName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDepartmentId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDepartmentName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProoertySource(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUseDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setUserName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRfid(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWarehouseId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setCosting(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssetBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssetBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssetBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
