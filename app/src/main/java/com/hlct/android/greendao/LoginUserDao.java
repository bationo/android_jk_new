package com.hlct.android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hlct.android.bean.LoginUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_USER".
*/
public class LoginUserDao extends AbstractDao<LoginUser, Void> {

    public static final String TABLENAME = "LOGIN_USER";

    /**
     * Properties of entity LoginUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LoginName = new Property(0, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property PassWord = new Property(1, String.class, "passWord", false, "PASS_WORD");
        public final static Property UserFinger = new Property(2, String.class, "userFinger", false, "USER_FINGER");
        public final static Property UserType = new Property(3, String.class, "userType", false, "USER_TYPE");
    }


    public LoginUserDao(DaoConfig config) {
        super(config);
    }
    
    public LoginUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_USER\" (" + //
                "\"LOGIN_NAME\" TEXT UNIQUE ," + // 0: loginName
                "\"PASS_WORD\" TEXT," + // 1: passWord
                "\"USER_FINGER\" TEXT," + // 2: userFinger
                "\"USER_TYPE\" TEXT);"); // 3: userType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginUser entity) {
        stmt.clearBindings();
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(1, loginName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(2, passWord);
        }
 
        String userFinger = entity.getUserFinger();
        if (userFinger != null) {
            stmt.bindString(3, userFinger);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(4, userType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginUser entity) {
        stmt.clearBindings();
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(1, loginName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(2, passWord);
        }
 
        String userFinger = entity.getUserFinger();
        if (userFinger != null) {
            stmt.bindString(3, userFinger);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(4, userType);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LoginUser readEntity(Cursor cursor, int offset) {
        LoginUser entity = new LoginUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // loginName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // passWord
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userFinger
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // userType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginUser entity, int offset) {
        entity.setLoginName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassWord(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserFinger(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LoginUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LoginUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(LoginUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
